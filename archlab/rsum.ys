# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
.align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:	irmovq ele1,%rdi
	call rsum_list		# rsum_list(list_ptr ls)
	ret

# long rsum_list(list_ptr ls)
# start pointer in %rdi
rsum_list:
	pushq	%rbp
	rrmovq	%rsp, %rbp
    irmovq  $32, %r8
	subq	%r8, %rsp
	rmmovq	%rdi, -24(%rbp)
    andq    %rdi, %rdi
	jne	L6
	irmovq	$0, %rax
	jmp	L7
L6:
	mrmovq	-24(%rbp), %rax
	mrmovq	(%rax), %rax
	rmmovq	%rax, -8(%rbp)
	mrmovq	-24(%rbp), %rax
	mrmovq	8(%rax), %rax
	rrmovq	%rax, %rdi
	call	rsum_list
	rmmovq	%rax, -16(%rbp)
	mrmovq	-16(%rbp), %rax
	mrmovq	-8(%rbp), %rdx
	addq	%rdx, %rax
L7:
    rrmovq  %rbp, %rsp
    popq    %rbp
	ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
